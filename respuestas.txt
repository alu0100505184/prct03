18. ¿Cu ́al es el resultado de la siguiente operaci ́on?
2.0.0-p247 :001 > puts "Hello world"
???
=> ???
2.0.0-p247 :002 >

-----
Hello world
 => nil
----

20. Escriba el c ́odigo fuente
Ruby
que hace que se muestre por la consola la frase
"Hola Mundo"
, al-
mac ́enelo en el fichero
helloworld.rb
y ejec ́utelo con el int ́erprete interactivo. (
irb helloworld.rb
)
----------------
irb helloworld.rb
2.0.0p247 :001 > #!/usr/bin/ruby
2.0.0p247 :002 >   puts "Hello world"
Hello world
 => nil 
----------------


21. ¿Cu ́ales son las diferencias entre la ejecuci ́on del pro
grama"Hola Mundo"
con el int ́erprete
de
Ruby
(
ruby helloWorld.rb
) y el int ́erprete interactivo del ejercicio anterior? Escr
iba la
respuesta en fichero creado en el ejercicio 9.

--------------------
ruby helloworld.rb
Hello world
alu3991@cc418:~/Desktop/lpp/prct03$ irb helloworld.rb
2.0.0p247 :001 > #!/usr/bin/ruby
2.0.0p247 :002 >   puts "Hello world"
Hello world
 => nil 
--------------------



26. ¿Cu ́al es el resultado de cada una de las siguientes opera
ciones?
[1] pry(main)> puts x

10
=> nil


[2] pry(main)> def hello
[2] pry(main)* puts "Hello world"
[2] pry(main)* end
=> nil
2
[3] pry(main)> hello
Hello world
=> nil

[4] pry(main)> byebye
bye bye world!!!
=> nil

[5] pry(main)> x = "changed"
=> "changed"

[6] pry(main)> exit
program resumes here. Value of x is: changed

27. ¿Cu ́ales son las diferencias entre la ejecuci ́on del pro
grama
"Hola Mundo"
con el int ́erprete
interactivo y con
pry
? Escriba la respuesta en fichero creado en el ejercicio 9.

irb helloworld.rb
2.0.0p247 :001 > #!/usr/bin/ruby
2.0.0p247 :002 >   puts "Hello world"
Hello world
 => nil 
2.0.0p247 :003 > 
alu3991@cc418:~/Desktop/lpp/prct03$ pry helloworld.rb
Hello world


---------------- Para estudiar --------------------
34. ¿Qu ́e diferencia hay entre
"\t\n"
y
’\t\n’
?


2.0.0p247 :001 > "\t\n"
 => "\t\n" 
2.0.0p247 :002 > '\t\n'
 => "\\t\\n" 

Cuando ruby se encuentra unas dobles comillas inspecciona dentro para ver si dentro hay alguna variable que interpolar. 
Si solo usamos comillas simples no se preocupa de ello y lo coge todo como un string.


35. ¿C ́omo funciona
%q
? ¿Qu ́e es
%q{hello world\n}
? ¿Qu ́e es
%q{’a’ ’b’ ’c’}
?

%q{hello world\n}
 => "hello world\\n" 
%q{'a' 'b' 'c'}
 => "'a' 'b' 'c'" 
Equivale una cadena que contiene el string

36. ¿C ́omo funciona
%Q
? ¿Qu ́e es
%Q{hello world\n}
? ¿Qu ́e es
%Q{"a" "b" "c"}
?

%Q{hello world\n}
 => "hello world\n" 
2.0.0p247 :017 > %Q{'a' 'b' 'c'}

Equivale al valor del string
 => "'a' 'b' 'c'" 

37. ¿Qué queda en c?
>> a = 4
=> 4
>> b = 2
=> 2
>> c = <<HERE
0:0:0" --#{a}--
0:0:0" --#{b}--
0:0:0" HERE

 => "--4--\n--2--\n" 

38. ¿Qué queda en c?
0:0:0> a = 4
=> 4
0:0:0> b =2
=> 2
0:0:0> c = <<’HERE’
0:0:0’ --#{a}--
0:0:0’ --#{b}--
0:0:0’ HERE

 => "--\#{a}--\n--\#{b}--\n" 

39. s = "hello". ¿Cuál es el valor de las siguientes expresiones?

s[0,2]: => "he" 
s[-1,1]: => "o" 
s[0,10]: => "hello" 

40. ¿Qué queda en g?
>> g = "hello"
=> "hello"
>> g << " world"

=> "helloworld" 


41. ¿Qué queda en e?
>> e = ’.’*3
=> "..." 


42. ¿Cuál es el resultado?
>> a = 1
=> 1
>> "#{a=a+1} "*3
=> "222" 


43. ¿Qué es esto? %w[this is a test]
=> ["this", "is", "a", "test"] 


44. ¿Qué es esto? %w[\t \n]
=> ["\\t", "\\n"] 


45. ¿Qué es esto? %W[\t \n]
=> ["\t", "\n"] 


46. ¿Qué contiene nils? nils = Array.new(3)
=> [nil, nil, nil] 

47. ¿Qué contiene zeros?
zeros = Array.new(3, 0)

48. ¿Qu ́e queda en
b
?
>> x = [[1,2],[3,4]]
=> [[1, 2], [3, 4]]
>> b = Array.new(x)
49. ¿Qu ́e queda en
c
?
>> c = Array.new(3) { |i| 2*i }
50. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ???
>> a[-2,2]
=> ???
>> a[0..2]
=> ???
>> a[0...1]
=> ???
>> a[-2..-1]
=> ???
4
51. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ???
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ???
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> ???
>> a[0,2] = []
=> []
>> a
=> ???
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> ???
>> a[-2,2] = nil
=> nil
>> a
=> ???
52. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a = (1...4).to_a
=> ???
>> a = a + [4, 5]
=> ???
>> a += [[6, 7, 8]]
=> ???
>> a = a + 9
=> ???
53. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
=> ???
>> x = x - %w{b c d}
=> ???
54. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> z = [0]*8
=> ???
55. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a = []
=> []
>> a << 1
=> ???
>> a << 2 << 3
=> ???
>> a << [4, 5, 6]
=> ???
>> a.concat [7, 8]
=> ???
5
56. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> ???
>> d = b | a
=> ???
>> e = a & b
=> ???
>> f = b & a
=> ???
57. ¿Qu ́e resultados dan las siguientes operaciones?
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> ???
>> b = 1...10
=> 1....10
>> b.to_a
=> ???
>> b.include? 10
=> ???
>> b.include? 8
=> ???
>> b.step(2) {|x| print "#{x} " }
=> ???
>> 1..3.to_a
=> ???
58. ¿Qu ́e resultados dan las siguientes operaciones?
>> r = 0...100
=> 0....100
>> r.member? 50
=> ???
>> r.include? 99.9
=> ???
>> r.member? 99.9
=> ???
59. ¿Qu ́e resultados dan las siguientes operaciones?
>> true.class
=> ???
>> false.class
=> ???
>> puts "hello" if 0
=> ???
>> puts "hello" if nil
=> ???
>> puts "hello" if ""
=> ???
60. ¿Qu ́e resultados dan las siguientes operaciones?
>> x = :sym
=> :sym
>> x.class
6
=> ???
>> x == ’sym’
=> ???
>> x == :sym
=> ???
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> ???
>> x == ’sym’.to_sym
=> ???
>> x.to_s == ’sym’
=> ???
61. ¿Qu ́e resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> ???
>> t[-1] = ""
=> ???
>> print s
???
>> t = "Java"
=> ???
>> print s, t
???
62. ¿Cu ́al es el resultado?
>> "%d %s" % [3, "rubies"]
=> ???
63. ¿Cu ́ales son los resultados?
>> x, y = 4, 5
=> ???
>> z = x > y ? x : y
=> ???
>> x,y,z = [1,2,3]
=> ???
64. ¿Qu ́e resultados dan las siguientes operaciones?
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> ???
>> x.values
=> ???
>> x[:c] = 3
=> 3
>> x
=> ???
>> x.delete(’a’)
=> nil
>> x
=> ???
>> x.delete(:a)
=> 1
>> x
=> ???
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
7
>> x.delete_if { |k,v| v % 2 == 0 }
=> ???
>> x
=> ???
65. ¿Qu ́e hace la siguiente sentencia?
counts = Hash.new(0)
¿Qu ́e diferencia hay con la asignaci ́on
counts = {}
?
66. ¿Qu ́e retorna esta expresi ́on regular?
’hello world, hello LPP’.scan /\w+/
67. Cierre la sesi ́o
